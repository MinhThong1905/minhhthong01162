import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# C·∫•u h√¨nh Seaborn
sns.set_style('whitegrid')

# T·∫£i d·ªØ li·ªáu
@st.cache_data
def load_data():
    df = pd.read_csv("Walmart_Sales.csv")
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')    
    return df

df = load_data()

st.title("üìä Ph√¢n T√≠ch Doanh Thu Walmart")
st.markdown("D·ªØ li·ªáu doanh thu h√†ng tu·∫ßn t·ª´ c√°c c·ª≠a h√†ng Walmart. C√°c bi·ªÉu ƒë·ªì d∆∞·ªõi ƒë√¢y tr√¨nh b√†y ph√¢n t√≠ch theo th·ªùi gian, ƒë·ªãa ƒëi·ªÉm, v√† theo ng√†y l·ªÖ.")

# 1. Bi·ªÉu ƒë·ªì T·ªïng doanh thu m·ªói 3 th√°ng
# Drop rows with invalid or missing 'Date'
df.dropna(subset=['Date'], inplace=True)

# Create quarter labels in 'YYYY-Qx' format
df['Quarter3M'] = df['Date'].dt.year.astype(str) + '-Q' + (((df['Date'].dt.month - 1) // 3) + 1).astype(str)

# Group by quarter and sum total sales
quarterly_sales = df.groupby('Quarter3M')['Weekly_Sales'].sum().reset_index()

# Plotting
fig, ax = plt.subplots(figsize=(14, 7))
ax.bar(quarterly_sales['Quarter3M'], quarterly_sales['Weekly_Sales'], color='lightblue')

ax.set_title('T·ªïng Doanh Thu M·ªói Qu√Ω (3 Th√°ng)', fontsize=16)
ax.set_xlabel('Qu√Ω (NƒÉm - Qx)', fontsize=14)
ax.set_ylabel('T·ªïng Doanh Thu', fontsize=14)
ax.grid(True, linestyle='--', alpha=0.6)

# Improve readability of x-axis labels
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)

# Display the plot in Streamlit
st.subheader("1. T·ªïng Doanh Thu M·ªói Qu√Ω (3 Th√°ng)")
st.pyplot(fig)

# 2. Bi·ªÉu ƒë·ªì Doanh thu theo Ng√†y
st.subheader("2. T·ªïng Doanh Thu theo Ng√†y")
daily_sales = df.groupby('Date')['Weekly_Sales'].sum()

fig2, ax2 = plt.subplots(figsize=(12, 6))
daily_sales.plot(ax=ax2)
ax2.set_title('T·ªïng Doanh Thu theo Ng√†y')
ax2.set_xlabel('Ng√†y')
ax2.set_ylabel('T·ªïng Doanh Thu')
plt.xticks(rotation=45)
st.pyplot(fig2)

# 3. Doanh thu trung b√¨nh theo c·ª≠a h√†ng
st.subheader("3. Doanh Thu Trung B√¨nh Theo C·ª≠a H√†ng (Store)")
avg_store_sales = df.groupby('Store')['Weekly_Sales'].mean().sort_values()

fig3, ax3 = plt.subplots(figsize=(8, 5))
avg_store_sales.plot(kind='barh', ax=ax3)
ax3.set_title('Doanh Thu Trung B√¨nh Theo Store')
ax3.set_xlabel('Doanh Thu Trung B√¨nh')
ax3.set_ylabel('C·ª≠a H√†ng')
st.pyplot(fig3)

# 4. T·ª∑ l·ªá doanh thu c·ªßa Top 5 c·ª≠a h√†ng
st.subheader("4. T·ª∑ L·ªá Doanh Thu c·ªßa Top 5 C·ª≠a H√†ng")
city_sales = df.groupby('Store')['Weekly_Sales'].sum()
top_cities = city_sales.sort_values(ascending=False).head(5)

fig4, ax4 = plt.subplots(figsize=(8, 8))
top_cities.plot(kind='pie', autopct='%1.1f%%', startangle=140, ax=ax4)
ax4.set_ylabel('')
ax4.set_title('Top 5 C·ª≠a H√†ng c√≥ Doanh Thu Cao Nh·∫•t')
st.pyplot(fig4)

# 5. Ph√¢n ph·ªëi doanh thu ng√†y l·ªÖ vs ng√†y th∆∞·ªùng
st.subheader("5. Ph√¢n Ph·ªëi Doanh Thu: Ng√†y L·ªÖ vs Ng√†y Th∆∞·ªùng")
df['Holiday_Flag'] = df['Holiday_Flag'].astype(bool)

fig5, ax5 = plt.subplots(figsize=(8, 5))
sns.boxplot(data=df, x='Holiday_Flag', y='Weekly_Sales', ax=ax5)
ax5.set_title('Doanh Thu: Ng√†y L·ªÖ vs Ng√†y Th∆∞·ªùng')
ax5.set_xlabel('Holiday (True/False)')
ax5.set_ylabel('Doanh Thu')
st.pyplot(fig5)

import matplotlib.pyplot as plt

# [Your existing code]
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd

# Ensure your DataFrame 'df' is loaded and preprocessed before this point

# Convert 'Date' to datetime
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# Extract features from date
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day

# Encode 'Holiday_Flag'
df['Holiday_Flag'] = df['Holiday_Flag'].astype(int)

# Drop missing values
df = df.dropna(subset=['Weekly_Sales', 'Date'])

# Prepare features and target
X = df[['Year', 'Month', 'Day', 'Holiday_Flag']]
y = df['Weekly_Sales']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Evaluate model
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R-squared:", r2_score(y_test, y_pred))

# Plot Actual vs Predicted sales
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Sales")
plt.grid(True)
plt.show()

st.subheader("6. M√¥ h√¨nh ph√¢n t√≠ch s·ªë l∆∞·ª£ng b√°n th·ª±c v√† d·ª± ƒëo√°n")

fig, ax = plt.subplots(figsize=(10, 5))
ax.scatter(y_test, y_pred, alpha=0.5)
ax.set_xlabel("Actual Sales")
ax.set_ylabel("Predicted Sales")
ax.set_title("Actual vs Predicted Sales")
ax.grid(True)

st.pyplot(fig)
